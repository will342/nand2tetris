/** Implements the snake game */


class SnakeGame {
    field Snake snake;
    field Food food;
    field int direction; // the snakes's current direction: 
                        // 0=none, 1=up, 2=down, 3=left, 4=right
    field boolean gameOverFlag;

    constructor SnakeGame new(){

        do Screen.setColor(true);

        //draw border
        do Screen.drawLine(0, 0, 511, 0);     // top border
        do Screen.drawLine(0, 255, 511, 255); // bottom border
        do Screen.drawLine(0, 0, 0, 255);     // left border
        do Screen.drawLine(511, 0, 511, 255); // right border
    
        //create snake at x = 250, y = 125, size = 8, length = 1
        let snake = Snake.new(100,125,8,1);

        //create food at x = 125, y = 200, size = 4
        let food = Food.new(125, 200, 4);
        
        let gameOverFlag = false;

        return this;
    }

    method void moveSnake() {
      if (direction = 1) { do snake.moveUp(); }
      if (direction = 2) { do snake.moveDown(); }
      if (direction = 3) { do snake.moveLeft(); }
      if (direction = 4) { do snake.moveRight(); }
      //do snake.drawSegments();
      //do snake.eraseTail();
      do snake.cordOutput(); //debug
      do Sys.wait(5);  // delays the next movement
      return;
   }


    method void run() {
        var char key;
        var char lastKey;
        var boolean exit;
        let exit = false;
        let lastKey = 0;

        while (~exit & ~gameOverFlag) {
            let key = Keyboard.keyPressed();

            // ESC
            if (key = 140) { let exit = true; }

            // Arrow keys: only update direction
            if (key = 131) { let direction = 1; }
            if (key = 133) { let direction = 2; }
            if (key = 130) { let direction = 3; }
            if (key = 132) { let direction = 4; }

            // Always move in the current direction
            do moveSnake();

            do Sys.wait(5);
            do gameOver();
        }
        return;
    }

    method void gameOver() {

        var boolean xOverlap;
        var boolean yOverlap;

        /** Checks for collision against walls */
        if (snake.getX() + snake.getSize() = 510)  {let gameOverFlag = true;} 
        if (snake.getX() = 2)                      {let gameOverFlag = true;} 
        if (snake.getY() + snake.getSize() = 254)  {let gameOverFlag = true;}
        if (snake.getY() = 2)                      {let gameOverFlag = true;}

        let xOverlap = (snake.getX() < food.getFoodX() + food.getFoodSize()) &
                    (snake.getX() + snake.getSize() > food.getFoodX());
        let yOverlap = (snake.getY() < food.getFoodY() + food.getFoodSize()) &
                    (snake.getY() + snake.getSize() > food.getFoodY());


        if (xOverlap & yOverlap & ~food.isEaten()) {
            do food.erase();
            do snake.grow(direction);
            do Output.moveCursor(0,0);
            //do Output.printString("Yum");
        }
        return;    
    }

    method void dispose() {
        return;
    }
}        