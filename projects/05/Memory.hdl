// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

//Memory: The three main chip-parts of this chip are RAM16K, Screen, and Keyboard. The Screen
//and the Keyboard are available as builtin chips. Although the RAM16K chip was built in project 3,
//we recommend using its builtin version.

//Access to any address from 0 to 16,383 results in accessing the ram16k chip-part
//Access to any address from 16,384 to 24,575 results in accessing the screen chip-part
//Access to any other address is invalid

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Check address in range of ram16k
    Not(in = address[14], out = ram);
    And(a = load, b = ram, out = loadRam16k);
    RAM16K(in = in, load = loadRam16k, address = address[0..13], out = RamOut);

    And(a = address[14], b = address[13], out = kbdRead);

    Or( a= kbdRead, b = ram, out = c);
    Not(in = c, out = screen);
    And(a = load, b = screen, out = loadScreen);

    Screen(in = in, load = loadScreen, address = address[0..12], out = ScreenOut);
    
    Keyboard(out = kbd);

    Mux4Way16(a = kbd, b = RamOut, c = ScreenOut, d = false, sel[0] = ram, sel[1] = screen, out = out);






}